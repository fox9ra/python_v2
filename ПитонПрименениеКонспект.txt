объекты - это представление данных в python (абстракция для данных), для неизменяемых если объекта в памяти нет то он создается, если есть то переиспользуется старый
данные - это объекты и отношения к ним например есть:
переменная - в языке python - это всего лишь ссылка на объект

###############################
#
#		Модель данных
#
###############################
a=1
b=2
c=[a,b] - список
тогда в оперативной памяти объекты это 1 и 2,а с это объект с - это a и b и отношение к объектам 1 и 2

###############################
у любого объекта еть 3 преременных:
-идентификатор - то что позволяет в любой момент времени отличить один объект от другого чтоб посмотреть есть функция id()
ссылаются ли объекты на один и тот же идентификатор можно проверить с помощьф оператора is


-тип - определяет то что можем сделать с объектом, определяет возможные принимаемы значения и его поведение, можно узнать с помощью type()
x=[1,2,3]
type(x) - #class 'list'
type(4) - #class 'int'
type(type(x)) - #class 'type'

-значение - если в процессе жизни объект может изменить свое значен то он изменяем (mutable object), если не изменяем то (immutable)
immutable:
*числа - в контексте чисел можем изменить только ссылки на объекты справедливо для всех чисел int, float, complex
*bool - логический тип имеет только 2 объекта True и False
*tuple (кортеж) - неизменяемая последовательность и будучи один раз созданным неизменяется до конца жизни объекта
*str (строки как последовательность символов) - хранятся символы в uniocode (utf8 default)
*frozenset (неизменяемое множество)

mutable: !для всех изменяем типов будет создаваться новый объект!
*list(список) - значение списка это упорядоченное множество ссылок на объекты, можем например добавить ссылка на объект
*dict (словари) - можем изменить значение по ключу, добавить новую пару, или удаить ключ
*set (множество) - так же можем изменять

###############################
оператор присваивания:
x = 4 (имя = (что то) что то в любом случае будет объктом)

##############
иземеняется объект а не перепенная например:
x=[1,2,3]
y=x
print (y is x) #True
x.append(4)
print(x) #[1,2,3,4]
print(y) #[1,2,3,4]
как видим изменили объект x т.к. y ссылается на тот же объет то изменился и y
#############

###############################
#
#		Функции и стек вызовов
#
###############################

Функции используются для :
- переиспользования части кода т.о. уменьшают код, исключение ошибок, 
- структурирование кода хорошая практика написание функций
- сокрытие деталей реализации позволяет не заморациваться думая как функция устроена внутри, достаточно понимать что делает

#####
определение функции начинается с def (define - определить), отступ в 4 пробела в теле функции - важен т.к. это единственный знак интерпретатору который показывает что мы еще в теле функции, определение функции в python выполняется целиком т.е. сначала интерпритатор доходит до конца тела, и создает объект для функции в данном случае function_name будет ссылаться на объект созданый функцией

type(function_name) #class 'function'

при исполнении фунции сначала выполняется инициализация аргументов

#####
стек вызовов, машинный стек
Стек - абстрактная структура данных
push - операция положить элемент на стек
pop - забрать элемент из стека

можно сравнить с детской пирамидкой
Стек вызов отборажает все функции которые исполняются в данный момент, и кто кого ждет

пример со стеком:
------------------
x=[1,2,3]

x.append(4)
x.append(5)

print(x) #[1, 2, 3, 4, 5]

top=x.pop() # top() за
print(top) #5 
print(x)  #[1, 2, 3, 4]

top=x.pop()
print(top) #4
print(x) #[1, 2, 3]
#после методов append и pop данный список ведет себя так же как и стек
------------------

для возвращения значения используется return, после return функция дальше не выполняется. в функции не обязательно что то возвращать если используется пустой return или его вообще нет то вернется None - это объект